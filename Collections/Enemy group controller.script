RANDOM_MOVE_DURATION = 5
MARKED_MOVE_DURATION = 1

local function getRandomPos(self)
	return vmath.vector3( math.random(0, WINDOW_WIDTH), math.random(0, WINDOW_HEIGHT), go.get_position().z)
end

local function moveRandomly(self)
	self.reachDestination = false
	
	self.randomPos = getRandomPos(self)
	
	go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, self.randomPos.x, go.EASING_LINEAR, RANDOM_MOVE_DURATION, 0, function(self)
		self.reachDestination = true
		moveRandomly(self)
	end)
	go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, self.randomPos.y, go.EASING_LINEAR, RANDOM_MOVE_DURATION)
end

local function vectorFloor(vector)
	local result = vmath.vector3(vector)
	result.x = math.floor(result.x)
	result.y = math.floor(result.y)
	result.z = 0.1
	return result
end

local function sendGetNextMarkedPos(self)
	msg.post(self.markedMoveControllerUrl, MESSAGE_IDS.GET_NEXT_MARKED_POS, { next_marked_pos_index = self.nextMarkedPosIndex })
end

local function moveToMarkedPos(self)
	self.reachDestination = false
	
	go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, self.nextMarkedPos.x, go.EASING_LINEAR, MARKED_MOVE_DURATION, 0, function(self)
		self.reachDestination = true
		sendGetNextMarkedPos(self)
	end)
	go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, self.nextMarkedPos.y, go.EASING_LINEAR, MARKED_MOVE_DURATION)
end

go.property("reachDestination", true)
go.property("randomPos", 0)
go.property("numberOfEnemies", 0)
go.property("nextMarkedPosIndex", 1)
go.property("nextMarkedPos", vmath.vector3())
go.property("isMoveRandomly", false)
go.property("markedMoveControllerUrl", msg.url())
function init(self)
	self.enemyIds = {}
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	if (self.reachDestination) then
		if (self.isMoveRandomly) then
			moveRandomly(self)
		else
			sendGetNextMarkedPos(self)
		end
	end
	
	-- Update enemy positions in group
	local newPos, enemyScriptUrl
	for key, enemyId in pairs(self.enemyIds) do
		enemyScriptUrl = msg.url()
		enemyScriptUrl.socket = "main"
		enemyScriptUrl.path = enemyId
		enemyScriptUrl.fragment = "Enemy"
		
		newPos = go.get_position() + go.get(enemyScriptUrl, "offsetFromGroupCenter")
		go.set_position(vectorFloor(newPos), enemyId)
	end
end

function on_message(self, message_id, message, sender)
	if (message_id == hash(MESSAGE_IDS.CREATED_IN_GROUP)) then
		table.insert(self.enemyIds, message.enemy_id)
	end
	if (message_id == hash(MESSAGE_IDS.ON_GROUP_ENEMY_DEATH)) then
		for key, enemyId in pairs(self.enemyIds) do
			if (hash_to_hex(enemyId) == hash_to_hex(message.dead_id)) then
				self.enemyIds[key] = nil
				self.numberOfEnemies = self.numberOfEnemies - 1
				break
			end
		end
		-- Remove group controller and marked movement controller
		-- when all enemies in group is dead
		if (self.numberOfEnemies <= 0) then
			msg.post(self.markedMoveControllerUrl, MESSAGE_IDS.REMOVE_MARKED_MOVEMENT_CONTROLLER)
			go.delete()
		end
	end
	if (message_id == hash(MESSAGE_IDS.RECEIVE_NEXT_MARKED_POS)) then
		self.nextMarkedPos = message.next_marked_pos
		self.nextMarkedPosIndex = self.nextMarkedPosIndex + 1

		if (self.nextMarkedPosIndex > message.max_marked_pos_index) then
			self.nextMarkedPosIndex = 1
		end

		moveToMarkedPos(self)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
