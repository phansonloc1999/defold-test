local function initLevelAnnouncing(level)
    local announcer =
        Timer.every(
        0.5,
        function()
            msg.post("GUI#main", MESSAGE_IDS.NOTIFY_LEVEL_ANNOUNCER, {level = level})
        end
    )
    announcer:limit(6)
end

function init(self)
    self.announcerEnabled = false
    gui.set_enabled(gui.get_node("Level announcer"), self.announcerEnabled)
end

function final(self)
    -- Add finalization code here
    -- Remove this function if not needed
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
    if (message_id == hash(MESSAGE_IDS.SET_HEALTH_FILL_WIDTH)) then
        local node = gui.get_node("Health bar fill stencil")
        local size = gui.get_size(node)
        size.x = message.health * 80 / 100
        gui.set_size(node, size)
    end
    if (message_id == hash(MESSAGE_IDS.LOSING_LIFE)) then
        local node = gui.get_node("Life template" .. tostring(message.lostLifeIndex) .. "/Life")
        gui.set_texture(node, "life-empty")
    end
    if (message_id == hash(MESSAGE_IDS.UPDATE_SCORE)) then
        local text = "Score: " .. message.score
        gui.set_text(gui.get_node("Score"), text)
    end
    if (message_id == hash(MESSAGE_IDS.NOTIFY_LEVEL_ANNOUNCER)) then
        self.announcerEnabled = not self.announcerEnabled
        local node = gui.get_node("Level announcer")
        gui.set_text(node, "Level " .. message.level .. "!")
        gui.set_enabled(node, self.announcerEnabled)
    end
    if (message_id == hash(MESSAGE_IDS.INIT_LEVEL_ANNOUNCING)) then
        initLevelAnnouncing(message.level)
    end
end

function on_input(self, action_id, action)
    -- Add input-handling code here
    -- Remove this function if not needed
end

function on_reload(self)
    -- Add input-handling code here
    -- Remove this function if not needed
end
