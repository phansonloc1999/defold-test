WINDOW_WIDTH, WINDOW_HEIGHT = 640, 480

local PLAYER_SPEED = 200
local PLAYER_WIDTH = 46
local PLAYER_HEIGHT = 45
PLAYER_BULLET_TYPE = nil

Timer = require "Scripts.knife.timer"

local function checkHealthForRespawning(self)
    if (self.health == 0) then
        self.lives = math.max(0, self.lives - 1)

        msg.post("GUI#main", MESSAGE_IDS.LOSING_LIFE, { lostLifeIndex = self.lives + 1})
        spawnPlayer(self)
    end
end

go.property("score", 0)
function init(self)
    self.dt = 0

    self.attackBtnPressed = false
    self.attackCoolDown = 0

    self.health = 100
    self.invulnerable = false

    self.lives = 3
    
    spawnPlayer(self)

    PLAYER_BULLET_TYPE = BULLET_TYPES.SMALL
end

function final(self)
    -- Add finalization code here
    -- Remove this function if not needed
end

function update(self, dt)
    self.dt = dt

    if (self.attackBtnPressed) then
        spawnBullet(self)
        self.attackBtnPressed = false
    end

    if (self.attackCoolDown ~= 0) then
        self.attackCoolDown = math.max(0, self.attackCoolDown - dt)
    end
end

function on_message(self, message_id, message, sender)
    if (message_id == hash("collision_response") and not self.invulnerable) then
        if (message.other_group == hash("enemies")) then
            self.health = math.max(0, self.health - 30)
                
            msg.post("GUI#main", MESSAGE_IDS.SET_HEALTH_FILL_WIDTH, { health = self.health })
            triggerInvulnerability(self)
            checkHealthForRespawning(self)
        end
    elseif (message_id == hash("trigger_response")) then
        if (message.other_group == hash("crates")) then
            local itemId = go.get(msg.url("main", message.other_id, "Crate"), "itemId")
            if (itemId == ITEM_IDS.HEALTH_PACK) then
                self.health = math.min(100, self.health + 50)
                msg.post("GUI#main", MESSAGE_IDS.SET_HEALTH_FILL_WIDTH, { health = self.health })
            end
            if (itemId == ITEM_IDS.WEAPON_UPGRADE) then
                PLAYER_BULLET_TYPE = BULLET_TYPES.MEDIUM
            end
        end
        if (message.other_group == hash("meteors") and not self.invulnerable) then
            local meteorURL = msg.url("main", message.other_id, "Meteor")
            self.health = math.max(0, self.health - go.get(meteorURL, "damage"))
            msg.post("GUI#main", "set_health_bar_fill_width", { health = self.health })

            triggerInvulnerability(self)
            checkHealthForRespawning(self)
        end
        if (message.other_group == hash("gems")) then
            local gemURL = msg.url("main", message.other_id, "Gem")
            self.score = self.score + go.get(gemURL, "score")
            msg.post("GUI#main", MESSAGE_IDS.UPDATE_SCORE, { score = self.score })
        end
    end
end

function on_input(self, action_id, action)
    handleMovement(self, action_id, action)

    if (action_id == hash("ATTACK") and self.attackCoolDown == 0) then
        self.attackCoolDown = PLAYER_BULLET_TYPE.ATTACK_COOLDOWN
        self.attackBtnPressed = true
    end
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end

function handleMovement(self, action_id, action)
    local pos = go.get_position()
    if (action_id == hash("MOVE_UP")) then
        pos.y = math.min(WINDOW_HEIGHT - PLAYER_HEIGHT / 2, pos.y + PLAYER_SPEED * self.dt)
    elseif (action_id == hash("MOVE_DOWN")) then
        pos.y = math.max(PLAYER_HEIGHT / 2, pos.y - PLAYER_SPEED * self.dt)
    end
    if (action_id == hash("MOVE_LEFT")) then
        pos.x = math.max(PLAYER_WIDTH / 2, pos.x - PLAYER_SPEED * self.dt)
    elseif (action_id == hash("MOVE_RIGHT")) then
        pos.x = math.min(WINDOW_WIDTH - PLAYER_WIDTH / 2, pos.x + PLAYER_SPEED * self.dt)
    end
    go.set_position(pos)
end

function spawnBullet(self)
    local bullet_id =
        factory.create("#bullet_factory", go.get_position("bullet_spawn_pos") + go.get_position())
end

function triggerInvulnerability(self)
    self.invulnerable = true

    go.animate("#body", "tint.w", go.PLAYBACK_ONCE_PINGPONG, 0.2, go.EASING_INOUTSINE, 1.5, 0, function()
        go.animate("#body", "tint.w", go.PLAYBACK_ONCE_PINGPONG, 0.2, go.EASING_INOUTSINE, 1.5, 0, function()
            self.invulnerable = false
        end)
    end)
end

function spawnPlayer(self)
    msg.post(".", "release_input_focus")
    self.health = 100

    msg.post("GUI#main", MESSAGE_IDS.SET_HEALTH_FILL_WIDTH, { health = self.health })
    triggerInvulnerability(self)

    local pos = go.get_position()
    pos.x, pos.y = WINDOW_WIDTH / 2, -PLAYER_HEIGHT
    go.set_position(pos)
    go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, PLAYER_HEIGHT * 2, go.EASING_LINEAR, 1.5, 0, function(self)
        msg.post(".", "acquire_input_focus")
    end)
end