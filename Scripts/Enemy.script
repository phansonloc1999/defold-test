math.randomseed(os.time())

ENEMY_WIDTH, ENEMY_HEIGHT = 27, 25
ENEMY_HEALTH = 100
ENEMY_ATTACK_COOLDOWN = 4

local moveRandomly
local chasePlayer

local function calMoveDuration(self, destinationPos)
	local curPos = go.get_world_position()
	local distance = math.sqrt(math.pow(destinationPos.x - curPos.x, 2) + math.pow(destinationPos.y - curPos.y, 2))
	return distance / self.speed
end

local function getRandomPos()
	return { x = math.random(ENEMY_WIDTH / 2, WINDOW_WIDTH - ENEMY_WIDTH / 2), y = math.random(ENEMY_HEIGHT / 2, WINDOW_HEIGHT - ENEMY_HEIGHT / 2) }
end

moveRandomly = function(self)
	self.movingToPos = getRandomPos()
	
	local moveDuration = calMoveDuration(self, self.movingToPos)
	
	go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, self.movingToPos.x, go.EASING_LINEAR, moveDuration, 0, function(self)
		moveRandomly(self)
	end)
	go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, self.movingToPos.y, go.EASING_LINEAR, moveDuration, 0)
end

local CHASING_DURATION = 3
chasePlayer = function(self)
	self.reachedDestination = false
	local playerPos = go.get("/Player", "position")
	go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, playerPos.x, go.EASING_LINEAR, CHASING_DURATION, 0, function(self)
		self.reachedDestination = true
	end)
	go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, playerPos.y, go.EASING_LINEAR, CHASING_DURATION)
end

local function flickersWhenDamaged(self)
	local id = go.get_id()
	self.invulnerableTimer = Timer.every(0.1, function(self)
		if (self.isEnabled) then
			msg.post(id, "disable")
			self.isEnabled = false
		else
			msg.post(id, "enable")
			self.isEnabled = true
		end
	end):finish(function()
		self.invulnerable = false 
	end)
	self.invulnerableTimer:limit(5)
end

local function sendGetNextMarkedPos(self)
	msg.post(
		self.markedMoveControllerUrl,
		MESSAGE_IDS.GET_NEXT_MARKED_POS,
		{ next_marked_pos_index = self.nextMarkedPosIndex }
	)
end

local function moveTo(self, destinationPos)
	sendGetNextMarkedPos(self)

	self.reachedDestination = false
	local moveDuration = calMoveDuration(self, destinationPos)
	go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, destinationPos.x, go.EASING_LINEAR, moveDuration, 0, function()
		self.reachedDestination = true
	end)
	go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, destinationPos.y, go.EASING_LINEAR, moveDuration, 0)
end

go.property("hasCrate", false)
go.property("hasGem", false)

go.property("crateItemId", 0)
go.property("speed", 50)
go.property("nextMarkedPosIndex", 0)

go.property("invulnerable", false)
go.property("isEnabled", true)
go.property("onlyChase", false)
go.property("onlyMoveRandom", false)
go.property("reachedDestination", true)
go.property("isInGroup", false)
go.property("offsetFromGroupCenter", vmath.vector3())
go.property("nextMarkedPos", vmath.vector3())

go.property("markedMoveControllerUrl", msg.url())

function init(self)
	self.health = ENEMY_HEALTH
	self.movingToPos = nil

	msg.post("/Enemy collection factories#Level controller", MESSAGE_IDS.ADD_ENEMY_ON_SPAWN, { enemy_id = go.get_id() })
	
	if (not self.isInGroup) then
		if (self.onlyMoveRandom) then
			moveRandomly(self)
		else
			if (self.onlyChase) then
				self.reachedDestination = true
			end
		end
	else
		self.offsetFromGroupCenter = go.get_position() - go.get_position("Enemy group controller")
		msg.post("Enemy group controller#Enemy group controller", MESSAGE_IDS.CREATED_IN_GROUP, { enemy_id = go.get_id() })
	end

	-- Must get send get next marked pos message in init before actually moving to in update
	if (not self.onlyChase and not self.onlyMoveRandom
		and self.reachedDestination and not self.isInGroup) then
		sendGetNextMarkedPos(self)
	end
end

function final(self)
	if (self.invulnerableTimer) then
		self.invulnerableTimer:remove()
	end
end

function update(self, dt)
	self.pos = go.get_position()

	if (self.onlyChase and go.get("/Player#Player", "invulnerable") == false) then
		if (self.reachedDestination) then
			chasePlayer(self)
		end
	end
	if (not self.onlyChase and not self.onlyMoveRandom and self.reachedDestination and not self.isInGroup) then
		moveTo(self, self.nextMarkedPos)
	end
end

function on_message(self, message_id, message, sender)
	if (message_id == hash("trigger_response")) then
		if (message.group == hash("bullets")) then
			local damage = go.get(msg.url("main", message.other_id, "Bullet"), "damage")
			self.health = math.max(0, self.health - damage)

			if (not self.invulnerable) then
				self.invulnerable = true
				flickersWhenDamaged(self)
			end

			if (self.health == 0) then
				if (self.hasCrate) then msg.post("/Crate factory", MESSAGE_IDS.SPAWN_CRATE, {spawn_position = go.get_position(), item_id = self.crateItemId}) end
				if (self.hasGem) then
					msg.post("/Gem factory", MESSAGE_IDS.SPAWN_GEM, { spawn_position = go.get_position() })
				end
				go.delete()

				if (self.isInGroup) then
					msg.post("Enemy group controller#Enemy group controller", MESSAGE_IDS.ON_GROUP_ENEMY_DEATH, { dead_id = go.get_id() })
				end
				msg.post("/Enemy collection factories#Level controller", MESSAGE_IDS.ON_ENEMY_DEATH, { dead_id = go.get_id() })
			end
		end
	end
	if (message_id == hash(MESSAGE_IDS.RECEIVE_NEXT_MARKED_POS)) then
		self.nextMarkedPos = message.next_marked_pos
		self.nextMarkedPosIndex = self.nextMarkedPosIndex + 1

		if (self.nextMarkedPosIndex > message.max_marked_pos_index) then
			self.nextMarkedPosIndex = 1
		end
	end 
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end