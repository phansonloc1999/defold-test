ENEMY_COUNT = 0

local function getEnemyCount(enemyIds)
	count = 0
	for key, value in pairs(enemyIds) do
		count = count + 1
	end
	return count
end

local function removeDeadEnemy(self, deadId)
	for key, valueId in pairs(self.enemyIds) do
		if (hash_to_hex(deadId) == hash_to_hex(valueId)) then
			self.enemyIds[key] = nil
			break
		end
	end
end

local function anotherEnemyChasePlayer(self, deadId)
	for key, valueId in pairs(self.enemyIds) do
		local url = msg.url("main", valueId, "Enemy")
		go.set(url, "onlyChase", true)
		go.set(url, "chaseFinished", true)
		go.set(url, "onlyMoveRandom", false)
		break
	end
end
	
go.property("currentLevel", 0)
function init(self)
	self.enemyIds = {}
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	if (ENEMY_COUNT == 0) then
		self.currentLevel = self.currentLevel + 1
		
		if (self.currentLevel == 1) then
			self.enemyIds = collectionfactory.create("Enemy collection factories#level1collectionfactory", vmath.vector3(320, 354, 0.1))
			ENEMY_COUNT = getEnemyCount(self.enemyIds)

			msg.post("GUI#main", MESSAGE_IDS.INIT_LEVEL_ANNOUNCING, {level = 1})
		end
		
		if (self.currentLevel == 2) then 

			self.enemyIds = collectionfactory.create("Enemy collection factories#level2collectionfactory", vmath.vector3(0, 0, 0.1))
			ENEMY_COUNT = getEnemyCount(self.enemyIds)
			
			msg.post("GUI#main", MESSAGE_IDS.INIT_LEVEL_ANNOUNCING, {level = 2})
		end
	end
end

function on_message(self, message_id, message, sender)
	if (message_id == hash(MESSAGE_IDS.ON_AN_ENEMY_DEATH)) then
		ENEMY_COUNT = ENEMY_COUNT - 1

		removeDeadEnemy(self, message.dead_id)
		if (message.only_chase) then
			anotherEnemyChasePlayer(self, message.dead_id)
		end
	end
	if (message_id == hash(MESSAGE_IDS.REMOVE_BOSS_FROM_ENEMY_IDS)) then
		for key, valueId in pairs(self.enemyIds) do
			if (valueId == message.boss_id) then
				self.enemyIds[key] = nil
				break
			end
		end
	end
end